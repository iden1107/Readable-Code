1
コードが長くなったとしても後で素早く理解しやすいコード

2
具体的に命名し、情報を詰め込む。明確に絞り込める
例）✕ addClass 何を加えるクラスなの？
　　〇 addImgClass イメージを加えるクラスと分かる
単位をつける　
例）size⇒size_mb

3
命名に解釈の幅を持たせない
例）right は「右」とも「OK」とも解釈できる
型に即した命名
例）booleanならdisableをつけるなど

4
縦の並び揃える
例）function("XXXX",""        ,""    )
　　function("XX"    ,"XXXX","X"  )
並べ方の規律を設ける

5
なぜ他の方法ではなくこのコードなのかをコメント
読み手が引っかかることを予想してコメント

6
簡潔に意味が詰め込まれたコメントを　
例）✕ …データを…渡して…情報の重複をなくし…
　　〇 ここは正規化をした

7
ifは左が比較対象、右が比較基準　
例） ✕ if 20 < age 
　　 〇 if age > 20
ifは肯定で優先して使用（ただしnotがわかりやすい場合は否定を使用）
基本はifを、簡素なら三項演算子
早期リターンを意識
ネストを浅くする
breakやcontinueを多用する

8
コードを分割する、段落分けする
優雅な手法を（蟻本の発想）

9
不要な変数は早期リターンで削除し、後ろで使わない
変数がかかるスコープを縮める、変数の衝突を避ける
変数は一度だけ使えば目に届きやすい

10
使いまわせるコードは分離させ後で利用しやすくする、汎用化を意識する

11
一度に１つのタスクを行う

12
コードが簡潔だとロジックも明快、解読もしやすい

13
ライブラリを利用する、それだけで大量のコードが１行で済む
コードの重量感を減らす、コード自体の重さ、動作の重さ、テストの重さに関わってくる

